<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dankey.blog</title>
    <link>/</link>
    <description>Recent content on dankey.blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>next(generators)</title>
      <link>/posts/next-generators/</link>
      <pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/next-generators/</guid>
      <description>Table of Contents  Introduction Slightly Beneath A yield return Duo Generator&amp;rsquo;s Lost Brother A yield yield Conundrum Context Managers   Introduction One of python&amp;rsquo;s best features in my opinion is generators. I believe it allows for some pretty concise and expressive code, as well as handing out an ergonomic handle to lazy evaluation when needed.
That being said, there&amp;rsquo;s a lot more to them than meets the eye and you could do a lot more with generators than iterating and collecting data.</description>
      <content>&lt;h1 id=&#34;table-of-contents&#34;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/posts/next-generators/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/next-generators/#under-the-covers&#34;&gt;Slightly Beneath&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/next-generators/#yield-and-return&#34;&gt;A yield return Duo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/next-generators/#generators-lost-brother&#34;&gt;Generator&amp;rsquo;s Lost Brother&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/next-generators/#a-yield-yield-conundrum&#34;&gt;A yield yield Conundrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/next-generators/#a-different-perspective&#34;&gt;Context Managers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;One of python&amp;rsquo;s best features in my opinion is generators. I believe it allows for some pretty concise and expressive code, as well as handing out an ergonomic handle to lazy evaluation when needed.&lt;/p&gt;
&lt;p&gt;That being said, there&amp;rsquo;s a lot more to them than meets the eye and you could do a lot more with generators than iterating and collecting data.&lt;/p&gt;
&lt;p&gt;In this article I will explore some less discussed capabilities of generators in CPython. Going from relatively basic stuff over to not-too-complicated but a bit more-complicated stuff.&lt;/p&gt;
&lt;p&gt;You need some basic understanding of generators, maybe some decorators and higher order functions, but not something too extreme.&lt;/p&gt;
&lt;p&gt;I will not claim any of the generator-guided approaches I&amp;rsquo;ll introduce here will be the best solution to the problem presented, but either way I hope you&amp;rsquo;ll find it entertaining/ discussion worthy.&lt;/p&gt;
&lt;h1 id=&#34;under-the-covers&#34;&gt;&lt;strong&gt;Under the Covers&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Before we continue, it&amp;rsquo;s nice to know the basics of &lt;code&gt;iterables&lt;/code&gt;, &lt;code&gt;iterators&lt;/code&gt;, and &lt;code&gt;iteration&lt;/code&gt; in general, over sequences and generators alike.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;An &lt;code&gt;iterable&lt;/code&gt; is any Python object capable of returning its members one at a time, permitting it to be iterated over in a for-loop. Familiar examples of iterables include lists, tuples, and strings - any such sequence can be iterated over in a for-loop.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are two methods an object can implement to achieve the title &lt;code&gt;Iterable&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;__getitem__&lt;/code&gt; : meaning it enables slicing, indexing and will raise an &lt;code&gt;IndexError&lt;/code&gt; when you&amp;rsquo;re no longer trying to access a valid index, sometimes called a sequence. Objects that implement such behavior, to name a few, are &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, &lt;code&gt;str&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;__iter__&lt;/code&gt; meaning you can iterate over its values one after the other. Notice this behavior can absolutely coincide with that of an object that already implements &lt;code&gt;__getitem__&lt;/code&gt; (as every data structure mentioned above does), &lt;strong&gt;but&lt;/strong&gt; not necessarily, as we see in the &lt;code&gt;set&lt;/code&gt; data structure that as we know does not allow slicing nor indexing as it is by nature an unordered collection.&lt;/p&gt;
&lt;p&gt;More importantly for our purposes, this is the behavior of a &lt;code&gt;generator&lt;/code&gt;. We want it to be lazy, to only do what it&amp;rsquo;s supposed to do and yield what it&amp;rsquo;s supposed to yield &lt;em&gt;only&lt;/em&gt; at each iteration, occupying an iterative nature and thus implementing an &lt;code&gt;__iter__&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;By definition we will not be able to tell its next-next value at a glance, we will not be able to take the second half of it without going through the first, as it hasn&amp;rsquo;t been evaluated yet. So it will not implement &lt;code&gt;__getitem__&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; it:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How the for loop knows when to stop?&lt;/p&gt;
&lt;p&gt;Well you could say, if an indexed data structure underlies, length could be received by calling &lt;code&gt;len()&lt;/code&gt;  so it could just handle the indexing and retrieve the values, translating theoretically to something like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(it)): &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# do stuff with it[i]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But what about a situation where your Iterable does not implement &lt;code&gt;__len__&lt;/code&gt; nor &lt;code&gt;__getitem__&lt;/code&gt;, how will you then know when to stop?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/genunderthecovers.png&#34; alt=&#34;genunderthecovers&#34;&gt;&lt;/p&gt;
&lt;p&gt;Some things to unpack here:
&lt;code&gt;iter&lt;/code&gt; - a built-in function that accepts an object and returns a corresponding iterator object, provided by the object&amp;rsquo;s implementation of the &lt;code&gt;__iter__&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;The most important thing to notice here is of course- the StopIteration Error.
&lt;code&gt;StopIteration&lt;/code&gt; is a built-in Exception that an iterator&amp;rsquo;s &lt;code&gt;__next__&lt;/code&gt; raises while trying to get the next value when there are none left.&lt;/p&gt;
&lt;p&gt;So basically all that&amp;rsquo;s going on is that the for loop abstracts away the listening for a StopIteration error part, and gives you back values if they are indeed yielded out, and if not, it elegantly just stops, surpressing the error on its way.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;side note: in latest versions of python, &lt;code&gt;StopIteration&lt;/code&gt; exception raised from generator code will be converted to &lt;code&gt;RuntimeError&lt;/code&gt;. See &lt;a href=&#34;https://docs.python.org/3/library/exceptions.html#StopIteration&#34;&gt;here&lt;/a&gt; and in the relevant PEPs linked inside.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;yield-and-return&#34;&gt;&lt;strong&gt;yield AND return?&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Usually we make a distinction between generator function&amp;rsquo;s and regular function&amp;rsquo;s semantics.&lt;/p&gt;
&lt;p&gt;The distinction being &lt;code&gt;yield&lt;/code&gt; is the keyword we use to output values back to the caller in a &lt;em&gt;generator function&lt;/em&gt; (in a routine manner) and &lt;code&gt;return&lt;/code&gt; to give back a value in a &lt;em&gt;regular function&lt;/em&gt;.
So what if we use both &lt;code&gt;yield&lt;/code&gt; and &lt;code&gt;return&lt;/code&gt; in the same function?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The following is a property of python 3 only.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create such a function, try to catch its values and examine its behavior.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]: &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rgen&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;:     &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;came from yield&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;:     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;came from return&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let&amp;rsquo;s think how we can get those values.
the yielded value as usual will be obtained by exhausting the generator object.
as in &lt;code&gt;next(rgen())&lt;/code&gt;. but what about the return value?&lt;/p&gt;
&lt;p&gt;So if we take a look at &lt;a href=&#34;https://www.python.org/dev/peps/pep-0255/&#34;&gt;PEP-255&lt;/a&gt;, it says&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When a return statement is encountered, control proceeds as in any function return, executing the appropriate finally clauses (if any exist). Then a StopIteration exception is raised, signalling that the iterator is exhausted.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ok so that&amp;rsquo;s fine, it&amp;rsquo;ll raise a StopIteration exception signaling we&amp;rsquo;re done. if that&amp;rsquo;s true then.. let&amp;rsquo;s try and catch it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]: g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rgen()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: next(g)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which outputs, as expected:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;came from yield
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;OK that seems alright but where&amp;rsquo;s the return value?
That&amp;rsquo;s where it gets interesting-&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A StopIteration attribute was added in v3.3, namely &lt;code&gt;value&lt;/code&gt; (&lt;a href=&#34;https://docs.python.org/3/library/exceptions.html#StopIteration&#34;&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So our value kind of hides in the StopIteratio error, let&amp;rsquo;s see;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]: &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(next(g))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StopIteration&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We run it and indeed the return raised a StopIteration exception which we successfully caught, printing:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;came from return 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So that&amp;rsquo;s neat. Notice the meaning behind the return in this context, as said in the &lt;a href=&#34;https://www.python.org/dev/peps/pep-0255/#then-why-not-allow-an-expression-on-return-too&#34;&gt;pep&lt;/a&gt;: &lt;em&gt;&amp;ldquo;I&amp;rsquo;m done, but I have one final useful value to return too, and this is it&amp;rdquo;&lt;/em&gt;, with an emphasis on &lt;em&gt;I&amp;rsquo;m done&lt;/em&gt;, because any yield &lt;strong&gt;after&lt;/strong&gt; the return statement &lt;strong&gt;will not&lt;/strong&gt; be executed.&lt;/p&gt;
&lt;p&gt;Note that this thing, generally speaking, is equivalent to doing &lt;code&gt;raise StopIteration(value)&lt;/code&gt;, so the applications are pretty similar.&lt;/p&gt;
&lt;p&gt;If you wish to terminate a generator function early and give an indication as to what happened or some sort of a resulting value, that may be the way to go.&lt;/p&gt;
&lt;p&gt;After all the StopIteration stuff and in a slight change of pace let&amp;rsquo;s explore something else.&lt;/p&gt;
&lt;h1 id=&#34;generators-lost-brother&#34;&gt;&lt;strong&gt;Generator&amp;rsquo;s Lost Brother&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Introduced in &lt;a href=&#34;https://www.python.org/dev/peps/pep-0342/&#34;&gt;PEP-342&lt;/a&gt;, coroutines are somewhat of an obscure feature of python, more often than not, discarded on tutorials covering generators.&lt;/p&gt;
&lt;p&gt;In essence, a coroutine is a generator, using the syntax and nature of the generator, but kind of backwards. Instead of spitting out values, the coroutine takes them in.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;listening...&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I received &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;x&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kinda weird in a glance, what is the yield doing on a right side of an assignment?&lt;/p&gt;
&lt;p&gt;I said a coroutine would take a value in. So what we&amp;rsquo;ll do here is send a value through the yield placing it in x. The way we&amp;rsquo;re going to do that is by the &lt;code&gt;send&lt;/code&gt; method (provided by the beloved pep-342).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; next(x) &lt;span style=&#34;color:#75715e&#34;&gt;# first we must advance the function to the yield statement&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;listening&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a greeting&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I received a greeting&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# followed by a nasty StopIteration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The send method accepts the argument, sends it to the coroutine, then advances to the next yield statement. If there is none, a StopIteration error will be raised.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Side notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You could also send a value to a regular generator, but the value you get back would just be the thing it yields.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You may want to &lt;code&gt;.close()&lt;/code&gt; that coroutine after you&amp;rsquo;re done with it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can throw, or rather, &amp;ldquo;inject&amp;rdquo; an exception as if it was raised inside a coroutine.
Meaning we could &lt;code&gt;x.throw(RunTimeError, &amp;quot;Something&#39;s Gone Terribly Wrong&amp;quot;)&lt;/code&gt; for example and it&amp;rsquo;d behave as if the error originated from the suspension point at the yield.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;See actual more concrete examples for coroutines in the &lt;a href=&#34;https://www.python.org/dev/peps/pep-0342/#examples&#34;&gt;PEP&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I will not dwell on it too much, what I do want to discuss a simple misguided idea I had on coroutines which had led me to better understand it as a whole.&lt;/p&gt;
&lt;h1 id=&#34;a-yield-yield-conundrum&#34;&gt;A yield yield conundrum&lt;/h1&gt;
&lt;h5 id=&#34;understanding-by-a-misunderstanding&#34;&gt;understanding by a misunderstanding&lt;/h5&gt;
&lt;p&gt;When I first encountered the concept of generator-coroutine I had an idea, what if we made a function to be a coroutine and a generator at the same time?&lt;/p&gt;
&lt;p&gt;I remember at the time I&amp;rsquo;ve read some text about the subject that mentioned something like this will lead to weird behavior, might make your mind bend (dabeaz probably? sounds like him lol) and other crazy warnings.&lt;/p&gt;
&lt;p&gt;Perhaps I should have listened.&lt;/p&gt;
&lt;p&gt;My idea was extremely simple: make a function what yields the &lt;code&gt;(yield)&lt;/code&gt; such that when you send value to the function it will yield it back to you. Basically an echo generator-coroutine.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;note we have to put the second &lt;code&gt;yield&lt;/code&gt; in brackets to let the lexer know it&amp;rsquo;s an expression (we would later send a value to) rather than just the keyword &lt;code&gt;yield&lt;/code&gt; which will kinda entail we&amp;rsquo;re trying to yield the yield keyword and result in a syntax error.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s test this out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: next(x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]: x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]: x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]: x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]: x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Seemingly it only responds to every other message we pass it. What&amp;rsquo;s going on??&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the example above I use ipython, in which if the response is None, it doesn&amp;rsquo;t display it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So let&amp;rsquo;s just be precise&amp;ndash; it&amp;rsquo;s not that it doesn&amp;rsquo;t respond to every other send, it&amp;rsquo;s that every other send yields back None.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;So we can begin to understand by taking a look at the disassembly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dis &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dis
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: dis(f)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; LOAD_CONST               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; YIELD_VALUE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; YIELD_VALUE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; POP_TOP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; JUMP_ABSOLUTE            &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; LOAD_CONST               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; RETURN_VALUE
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For some reason it first loads the const &lt;code&gt;None&lt;/code&gt; then yields stuff out.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;PEP-325&lt;/code&gt; says: &amp;ldquo;&lt;em&gt;The yield-statement will be allowed to be used on the right-hand side of an assignment; in that case it is referred to as yield-expression. The value of this yield-expression is None unless send() was called with a non-None argument.&lt;/em&gt;&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What&amp;rsquo;s actually going on is two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The first &lt;code&gt;yield&lt;/code&gt; yields None, being that the &lt;code&gt;(yield)&lt;/code&gt; evaluates to None.&lt;/li&gt;
&lt;li&gt;The second yield yields the value sent to the first &lt;code&gt;yield&lt;/code&gt;, that being our argument to the &lt;code&gt;send&lt;/code&gt; method.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To draw the two points together - the first always outputs None and receives some value. The second is always outputting the former value and ignoring input.
Remember- yield &lt;em&gt;always&lt;/em&gt; has both input &amp;amp; output, both of which can be None.&lt;/p&gt;
&lt;p&gt;If you think about it, it doesn&amp;rsquo;t make sense for it to be any other way.  We naively expected it to stop after the first yield, wait for us to send value to the second (yield) and echo back, but.. that&amp;rsquo;s not really reasonable considering the nature of the generator, just like the pep says &amp;ldquo;&lt;em&gt;Blocks in Python are not compiled into thunks; rather, yield suspends execution of the generator&amp;rsquo;s frame.&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Of course it wouldn&amp;rsquo;t wait for our response, it&amp;rsquo;s a generator that already took control! the second yield has to have a default value in order for the generator to yield something back to us.&lt;/p&gt;
&lt;h5 id=&#34;a-fix&#34;&gt;A fix&lt;/h5&gt;
&lt;p&gt;With the understanding we&amp;rsquo;ve acquired, can we fix it?
Well yeah, we know by now a coroutine has both an input and an output. So granted we wouldn&amp;rsquo;t have a cool yield yield but by understanding that the behavior we were looking for was already deeply rooted in the coroutine, we could just do-&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; v
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Making the yield take v as an input and an output interchangeably.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That&amp;rsquo;s the end of my tale. Thanks for coming to my ted talk.&lt;/p&gt;
&lt;p&gt;Bonus chapter! - looking at Context Managers through generator glasses.&lt;/p&gt;
&lt;h2 id=&#34;a-different-perspective&#34;&gt;A Different Perspective&lt;/h2&gt;
&lt;p&gt;Besides just handling iteration and spitting out values, generators have a really interesting property - they hold state.
You pass control to a generator function and it &amp;ldquo;halts&amp;rdquo; until you &lt;em&gt;actively&lt;/em&gt; advance it further.&lt;/p&gt;
&lt;p&gt;So whenever you use a generator, there&amp;rsquo;s this two part story at play here;
The first happens up until the yield, the second unfolds right after it.&lt;/p&gt;
&lt;p&gt;How can we take advantage of this? Context Managers. It&amp;rsquo;s kind of a famous feature around the python ecosystem as it provides a somewhat elegant handle to 2-part operations (such as opening and closing a file, acquiring and releasing a lock, etc.).&lt;/p&gt;
&lt;p&gt;Which is conceptually kind of similar to a behaviour of a generator function (for simplicity&amp;rsquo;s sake think of a function that yields only once).&lt;/p&gt;
&lt;p&gt;In any case, such context managers can regularly be implemented as a class with the dunder methods &lt;code&gt;__enter__&lt;/code&gt; and &lt;code&gt;__exit__&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A classic example is this: let&amp;rsquo;s say we want to create a temp directory, meaning we create a new folder, do some stuff in it, then delete it. It should look somewhat like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tempfile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; shutil
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Tempdir&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __enter__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dirname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tempfile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mkdtemp()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dirname
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __exit__(self, exc, val, tb):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        shutil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rmtree(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dirname)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At enter we do our deeds and at exit we clean up.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s great and all, but I probably wouldn&amp;rsquo;t have wanted to implement such class for every context manager I need, I think we could do better.&lt;/p&gt;
&lt;p&gt;What if we could abstract out the class and provide a simpler interface for creating those sorts of context managers?&lt;/p&gt;
&lt;h5 id=&#34;game-plan&#34;&gt;Game Plan&lt;/h5&gt;
&lt;p&gt;We&amp;rsquo;re going to make an interface that wraps around a generator function in which we&amp;rsquo;re doing stuff at the entry point (could be opening a file, starting a timer, whatever), then yielding after it to mark the halfpoint, after which we merely clean up (closing something, ending a timer, etc), with as little boilerplate as possible.&lt;/p&gt;
&lt;p&gt;In pseudo code, what we&amp;rsquo;re looking to accomplish here is an interface along the lines of;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ContextManager&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dostuff&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start operation
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; resource &lt;span style=&#34;color:#75715e&#34;&gt;# if needed, could be a handle to a file, could be some other operation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    end operation
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where ContextManager is the class we&amp;rsquo;ve abstracted with which we&amp;rsquo;re able to convert a generator-function (&lt;code&gt;dostuff&lt;/code&gt;) into a context manager.
To keep things simple, for now we&amp;rsquo;ll just make our CM print something on entry, return some value, then alert us with another print when we&amp;rsquo;re finished.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContextManager&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, func, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; func(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Simple enough, we got only one attribute which will be a generator-instance of the generator-function we&amp;rsquo;re wrapping.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s think about the entry point.&lt;/p&gt;
&lt;p&gt;All we really want from it is two things-&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Advance us to the yield statement (evaluate stuff on your way there while you&amp;rsquo;re at it).&lt;/li&gt;
&lt;li&gt;Give us back any object that we may want to recieve from the resource in question.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __enter__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; next(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gen, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is almost too simple. Just next that generator and give us whatever comes back.&lt;/p&gt;
&lt;p&gt;Next (no pun intended) we need to implement an exit.
What we&amp;rsquo;re really waiting for now, is the well expected StopIteration exception (as again we planned one yield only).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __exit__(self, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;e):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        next(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gen, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Note: *e stands for various errors that for our purposes aren&amp;rsquo;t really interesting so we&amp;rsquo;re just going to blatantly pretend we didn&amp;rsquo;t see (and surpress) them all. shhh&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Why another next if there&amp;rsquo;s no more stuff to yield you ask? simply because we want to drag ourselves straight down to the end of the function.&lt;/p&gt;
&lt;p&gt;Tired yet? well don&amp;rsquo;t be because we&amp;rsquo;re done!!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s make a simple function to see that it works:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ContextManager&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context_hello&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Initiating Operating..&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello from Context Manager!!!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Operation Completed!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# And of course use it like so; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; context_hello &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; resource:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(resource)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And indeed if we run the file &lt;code&gt;$ python cm.py&lt;/code&gt; we get:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Initiating Operating
Hello from Context Manager!!!
Operation Completed
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;small-caveat&#34;&gt;Small Caveat&lt;/h5&gt;
&lt;p&gt;I know I know I said we&amp;rsquo;re done. But see now we&amp;rsquo;ve got a certain limitation; What if we wanted to pass a parameter to the context manager? Like what if say we wanted that a different kind of string would come back?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: It may sound silly for us to try and return our own string but think about it in a broader way; let&amp;rsquo;s say we make a file opener CM, wouldn&amp;rsquo;t we want to specify the file&amp;rsquo;s name?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So let&amp;rsquo;s think about it, how &lt;em&gt;would&lt;/em&gt; we make or CM be open to receive an argument?
We obviously can&amp;rsquo;t just&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; context_hello(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Custom Message&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; resource:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(resource)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;right? We&amp;rsquo;d get an error-&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TypeError: &#39;ContextManager&#39; object is not callable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Why is that?&lt;/p&gt;
&lt;p&gt;Well think about it, we wrapped our generator function with a class, so it&amp;rsquo;s indeed a class by now.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;See it yourself by running &lt;code&gt;type(context_hello)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A class which by no means implements a &lt;code&gt;__call__&lt;/code&gt; method, so when we specify &lt;code&gt;()&lt;/code&gt; after &lt;code&gt;context_hello&lt;/code&gt; python doesn&amp;rsquo;t know what the hell to do with this call.&lt;/p&gt;
&lt;p&gt;So what &lt;em&gt;can&lt;/em&gt; we do?
At this point we&amp;rsquo;re way past &lt;code&gt;__init__&lt;/code&gt;, so somehow passing the arguments to the function is pretty overdue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Which by the way I kinda fooled you with the &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; in the implementation there, we are definitely passing absolutely nothing there.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Giving arguments to pass to the function from the call to the initiallization is too confusing and backwards to even think about.&lt;/p&gt;
&lt;p&gt;So we can do something very simple here, turn it back to a function!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;contextmanager&lt;/span&gt;(func):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs: ContextManager(func, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead of our decorator being a class, we&amp;rsquo;ll make it a function that&amp;rsquo;d receive the arguments and actually pass those to our precious &lt;code&gt;__init__&lt;/code&gt;, after which will be
initialized straight into the generator instance by &lt;code&gt;self.gen = func(*args, **kwargs)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We end up with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContextManager&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, func, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gen: Generator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; func(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __enter__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; next(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gen)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __exit__(self, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;e):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        next(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gen, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;contextmanager&lt;/span&gt;(func):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs: ContextManager(func, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@contextmanager&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context_hello&lt;/span&gt;(message):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Initiating Operating&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; message
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Operation Completed&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; context_hello(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Custom Message!&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; resource:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(resource)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And get our desired output:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Initiating Operating
Custom Message!
Operation Completed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And that&amp;rsquo;s about it, we succeded in creating a custom, generic and reusable Context Manager wrapper that allows us to create any kind of CM we&amp;rsquo;d like pretty easily.&lt;/p&gt;
&lt;p&gt;Remember the TempDir class we&amp;rsquo;ve seen at the beginning of this chapter?&lt;/p&gt;
&lt;p&gt;To leave with a good taste, let&amp;rsquo;s see an example on how to implement such tempdir context manager, but this time in yield form with our new contextmanager wrapper;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@contextmanager&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tempdir&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dirname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tempfile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mkdtemp()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; dirname
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    shutil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rmtree(dirname)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s a nice example indeed but do take note that from version 3.2 onwards you may use &lt;a href=&#34;https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryDirectory&#34;&gt;tempfile.TemporaryDirectory&lt;/a&gt; that works as context manager out of the box.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;digressions-clarifications&#34;&gt;Digressions, Clarifications&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;I didn&amp;rsquo;t tell you but what we&amp;rsquo;ve actually gone through here is a miniature implementation of python&amp;rsquo;s &lt;code&gt;contextlib.contextmanager&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://github.com/python/cpython/blob/3.10/Lib/contextlib.py&#34;&gt;actual implementation&lt;/a&gt; is a lot more complex, it handles a lot more edge cases and exceptions, and its &lt;a href=&#34;https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager&#34;&gt;recommended usage&lt;/a&gt; is generally more cautious as well.&lt;/li&gt;
&lt;li&gt;I hope the simplification made it somewhat more digestible for you.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lessons-from-this-chapter&#34;&gt;Lessons from this Chapter&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;We can easily make cool context managers with &lt;code&gt;@contextmanager&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;And this, in my opinion, is more important - we&amp;rsquo;ve created a different kind of mechanism around generators.
We&amp;rsquo;re using generators to do something very different from its ordinary use. There is no iterating over a sequence here, nor messing with concurrency, nothing like that. The generator merely acts like a mediator between entering to exiting. Which is pretty cool, or at least, educating.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;To be Continued...? maybe
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>idk how you got here, but you did, so
Hi In this blog you&amp;rsquo;ll find me rambling about programming related stuff I&amp;rsquo;ve learned that I find either interesting, beautiful or both.
 GitHub: https://github.com/dankeyy/ Mail: dankeyy@protonmail.com  </description>
      <content>&lt;p&gt;idk how you got here, but you did, so&lt;/p&gt;
&lt;h1 id=&#34;hi&#34;&gt;Hi&lt;/h1&gt;
&lt;p&gt;In this blog you&amp;rsquo;ll find me rambling about programming related stuff I&amp;rsquo;ve learned that I find either interesting, beautiful or both.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/dankeyy/&#34;&gt;https://github.com/dankeyy/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mail: &lt;a href=&#34;mailto:dankeyy@protonmail.com&#34;&gt;dankeyy@protonmail.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
